# -*- coding: utf-8 -*-


from threading import Thread

from .constants import Constants
from .export_error import ExportError
from .export_websocket import ExportWebSocket
from .utils import Utils


class Exporter(object):
    """Handles individual chart export request generated by ExportManager"""

    def __init__(self, export_config=None, export_done_listener=None, export_state_changed_listener=None):
        self.__export_config = export_config
        self.__export_done_listener = export_done_listener
        self.__export_state_changed_listener = export_state_changed_listener
        self.__export_server_host = Constants.DEFAULT_HOST
        self.__export_server_port = Constants.DEFAULT_PORT
        self.__websocket_client = None
        self.__socket_connection_thread = None

    def set_export_connection_config(self, host, port):
        self.__export_server_host = host
        self.__export_server_port = port

    def export_config(self):
        return self.__export_config

    def export_done_listener(self):
        return self.__export_done_listener

    def export_state_changed_listener(self):
        return self.__export_state_changed_listener

    def export_server_host(self):
        return self.__export_server_host

    def export_server_port(self):
        return self.__export_server_port

    def start(self):
        self.__socket_connection_thread = Thread(target=self.__handle_socket_connection)
        self.__socket_connection_thread.start()

    def cancel(self):
        self.__close_websocket_conn()

    def __handle_socket_connection(self):
        try:
            ws = self.__websocket_client = ExportWebSocket(self.__export_server_host,
                                                           self.__export_server_port,
                                                           self.__on_websocket_conn_opened,
                                                           self.__on_websocket_conn_closed,
                                                           self.__on_websocket_message_received)
            ws.connect()
            ws.run_forever()
        except Exception as e:
            self.__on_export_done(None, ExportError(str(e)))

    def __on_websocket_conn_opened(self):
        self.__websocket_client.send(self.__get_formatted_export_configs())

    def __on_websocket_conn_closed(self, code, reason=None):
        pass

    def __on_websocket_message_received(self, message):
        self.__process_data_received(str(message))

    def __close_websocket_conn(self):
        if self.__websocket_client is not None:
            try:
                self.__websocket_client.close()
            except Exception as e:
                pass

    def __process_data_received(self, data):
        if data.startswith(Constants.EXPORT_EVENT):
            self.__process_export_state_changed_data(data)
        elif data.startswith(Constants.EXPORT_DATA):
            self.__process_export_done_data(data)

    def __process_export_state_changed_data(self, data):
        state = data[len(Constants.EXPORT_EVENT):]
        state = Utils.json_parse(state)
        if state is not None and "error" not in state:
            self.__on_export_sate_changed({"state": state})
        else:
            err_msg = "Unexpected error occurred" if state is None else state["error"]
            self.__on_export_done(None, ExportError(err_msg))

    def __process_export_done_data(self, data):
        export_result = data[len(Constants.EXPORT_DATA):]
        export_result = Utils.json_parse(export_result)
        if export_result is None:
            self.__on_export_done(None, ExportError("Unexpected error occurred"))
        else:
            self.__on_export_done({"result": export_result}, None)

    def __on_export_sate_changed(self, state):
        if self.__export_state_changed_listener is not None:
            self.__export_state_changed_listener(state)

    def __on_export_done(self, result, error):
        self.__close_websocket_conn()
        if self.__export_done_listener is not None:
            self.__export_done_listener(result, error)

    def __get_formatted_export_configs(self):
        return "%s.%s<=:=>%s" % ("ExportManager", "export", self.__export_config.get_formatted_configs())
